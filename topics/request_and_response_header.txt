import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.common.constants.RequestHeaderConstant;
import com.example.common.constants.ResponseHeaderConstant;
import com.example.common.constants.ResponseEntityConstants;

@RestController
@RequestMapping("/api/students")
public class StudentController {

    private final StudentService studentService;
    private final HttpHeaderValidator httpHeaderValidator;

    @Autowired
    public StudentController(StudentService studentService, HttpHeaderValidator httpHeaderValidator) {
        this.studentService = studentService;
        this.httpHeaderValidator = httpHeaderValidator;
    }

    @PostMapping
    public ResponseEntity<Object> createStudent(@RequestHeader(RequestHeaderConstant.CONTENT_TYPE) String contentType,
                                                @RequestHeader(RequestHeaderConstant.ACCEPT) String acceptHeader,
                                                @RequestBody StudentRequest studentRequest) {
        // Validate HTTP request headers
        httpHeaderValidator.validateHttpRequestHeaders(contentType, acceptHeader);

        // Business logic to create a student
        Student createdStudent = studentService.createStudent(studentRequest);

        // Prepare response entity
        return ResponseEntity.status(HttpStatus.CREATED)
                .header(ResponseHeaderConstant.CONTENT_TYPE, ResponseHeaderConstant.CONTENT_TYPE_JSON)
                .body(createSuccessResponse("Student created successfully", createdStudent));
    }

    // Other endpoint methods follow a similar pattern

    // Helper methods to create response entities
    private Object createSuccessResponse(String message, Object data) {
        return Map.of(
                ResponseEntityConstants.MESSAGE, message,
                ResponseEntityConstants.DATA, data,
                ResponseEntityConstants.TIMESTAMP, LocalDateTime.now()
        );
    }
}


package com.example.common.constants;

public class ResponseHeaderConstant {

    // Common response header field names
    public static final String CONTENT_TYPE = "Content-Type";
    public static final String CACHE_CONTROL = "Cache-Control";
    public static final String LOCATION = "Location";
    public static final String ETAG = "ETag";
    public static final String SERVER = "Server";
    // Add more response headers as needed

    // Content type values
    public static final String CONTENT_TYPE_JSON = "application/json";
    public static final String CONTENT_TYPE_HTML = "text/html";
    // Add more content type values as needed

    private ResponseHeaderConstant() {
        // Private constructor to prevent instantiation
    }
}

package com.example.common.constants;

public class RequestHeaderConstant {

    // Common request header field names
    public static final String CONTENT_TYPE = "Content-Type";
    public static final String ACCEPT = "Accept";
    public static final String CONTENT_ENCODING = "Content-Encoding";
    public static final String CONTENT_LENGTH = "Content-Length";
    public static final String CONNECTION = "Connection";
    public static final String COOKIE = "Cookie";
    public static final String DATE = "Date";
    public static final String TRANSFER_ENCODING = "Transfer-Encoding";
    public static final String USER_AGENT = "User-Agent";
    // Add more request headers as needed

    // Content type values
    public static final String CONTENT_TYPE_JSON = "application/json";
    public static final String CONTENT_TYPE_XML = "application/xml";
    // Add more content type values as needed

    private RequestHeaderConstant() {
        // Private constructor to prevent instantiation
    }
}

Overview: üåê
Description: üìù
Objective: üéØ
Features and Functionalities: üõ†Ô∏è
Entities and Relationships: üß©
HTTP Status Codes: üö¶
Endpoints: üõ£Ô∏è
HATEOAS Links: üîó
Example Usage: üìñ
Class Diagram: üìä
Sequence Diagrams: üîÑ
Testing: üß™
Deployment: üöÄ
Security: üîí
Performance: ‚ö°
Functional Requirements: üìã
Non-Functional Requirements: üõ°Ô∏è
Order of Implementation: üìÖ
Database Choice and Schema: üóÑÔ∏è
Contribution: ü§ù
License: ‚öñÔ∏è


package com.example.service;

import com.example.dto.AppointmentRequest;
import com.example.model.Appointment;
import com.example.repository.AppointmentRepository;
import com.example.repository.AvailabilityRepository;
import com.example.repository.TeacherCourseRepository; // Assuming you have a repository to check teacher's courses
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class TeacherService {

    private final AvailabilityRepository availabilityRepository;
    private final AppointmentRepository appointmentRepository;
    private final TeacherCourseRepository teacherCourseRepository; // New repository for teacher's courses

    @Autowired
    public TeacherService(AvailabilityRepository availabilityRepository, AppointmentRepository appointmentRepository, TeacherCourseRepository teacherCourseRepository) {
        this.availabilityRepository = availabilityRepository;
        this.appointmentRepository = appointmentRepository;
        this.teacherCourseRepository = teacherCourseRepository; // Initialize the repository
    }

    public boolean isTeacherAvailable(Long teacherId, LocalDateTime dateTime) {
        // Check if there is an availability record for the teacher at that time
        return availabilityRepository.existsByTeacherIdAndStartDateTimeLessThanEqualAndEndDateTimeGreaterThanEqual(teacherId, dateTime, dateTime);
    }

    public Appointment makeAppointment(AppointmentRequest appointmentRequest) {
        // Check if the teacher teaches the specified course or degree
        boolean teachesCourse = teacherCourseRepository.existsByTeacherIdAndCourseId(appointmentRequest.getTeacherId(), appointmentRequest.getCourseId());
        if (!teachesCourse) {
            return null; // Teacher does not teach this course or degree
        }

        // Check if the teacher is available at the specified time
        if (isTeacherAvailable(appointmentRequest.getTeacherId(), appointmentRequest.getDateTime())) {
            // Create a new appointment using the appointmentRequest object
            Appointment appointment = new Appointment(
                appointmentRequest.getStudentId(),
                appointmentRequest.getTeacherId(),
                appointmentRequest.getCourseId(), // Set the course or degree ID
                appointmentRequest.getDateTime(),
                appointmentRequest.getDescription()
            );

            // Save the appointment
            return appointmentRepository.save(appointment);
        } else {
            return null;
        }
    }
}

Update the Controller
Finally, update the controller to use the AppointmentRequest object:
package com.example.controller;

import com.example.dto.AppointmentRequest;
import com.example.model.Appointment;
import com.example.service.TeacherService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1")
public class AppointmentController {

    private final TeacherService teacherService;

    @Autowired
    public AppointmentController(TeacherService teacherService) {
        this.teacherService = teacherService;
    }

    @PostMapping("/appointments")
    public ResponseEntity<Appointment> createAppointment(@RequestBody AppointmentRequest appointmentRequest) {
        // Attempt to create an appointment
        Appointment appointment = teacherService.makeAppointment(appointmentRequest);

        // Return appropriate response
        if (appointment != null) {
            return ResponseEntity.status(HttpStatus.CREATED).body(appointment);
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }
    }
}
